{"version":3,"file":"morphologycorejs.js","sources":["../src/Section.js","../src/Soma.js","../src/Morphology.js"],"sourcesContent":["\n/**\n * A section is a list of 3D points and some metadata. A section can have one parent\n * and multiple children when the dendrite or axone divide into mutliple dendrites\n * and axons.\n * A section instance can be built from scratch of it can be built using a raw object,\n * usually from a JSON description.\n */\nclass Section {\n\n  constructor () {\n    this._id = null\n    this._parent = null\n    this._children = []\n    this._typename = null\n    this._typevalue = null\n    this._points = null\n    this._radiuses = null\n  }\n\n\n  /**\n   * Defines the id of this seciton.\n   * Note: should probably not be used after `initWithRawSection` because then\n   * sections already have ids and chance to messup the id game are pretty high.\n   * @param {String|Number} id - the id\n   */\n  setId (id) {\n    this._id = id\n  }\n\n\n  /**\n   * Get the id of _this_ section\n   * @return {String|Number}\n   */\n  getId () {\n    return this._id\n  }\n\n\n  /**\n   * Build a section using a raw section object.\n   * @param {Object} rawSection - usually comes from a JSON file\n   */\n  initWithRawSection (rawSection) {\n    this._id = rawSection.id\n    this._typename = rawSection.typename\n    this._typevalue = rawSection.typevalue\n    this._points = rawSection.points.map( function(p){return p.positions})\n    this._radiuses = rawSection.points.map( function(p){return p.radius})\n\n    return this._id\n  }\n\n\n  /**\n   * Define the parent section of _this_ section, as an object reference.\n   * The only verification perfomed by this method is that a section is not added\n   * as its own parent.\n   * @param {Section} section - the section that is the parent of this one\n   * @return {Boolean} true if parent was successfully defined, false if not.\n   */\n  setParent (section) {\n    if (section && section.getId() !== this._id) {\n      this._parent = section\n      return true\n    }\n\n    console.warn( \"A section cannot be the parent of itself.\")\n    return false\n  }\n\n\n  /**\n   * Make a given section the child of _this_ one.\n   * Two verifications are perfomed before: ids must be diferent so that we are\n   * not allowing a section to be the child of itself, and that _this_ section\n   * does not already have the given section as a children (=> avoid doublons)\n   * @param {Section} section - The section to add as a child\n   * @return {Boolean} true if successfully added (of if already has the given child),\n   * false if the candidate cannot be a child\n   */\n  addChild (section) {\n    if (section.getId() !== this._id) {\n      if (this.hasChild(section)) {\n        console.warn(\"The given section is already one of the child to this one.\")\n      } else {\n        this._children.push( section )\n      }\n      return true\n\n    } else {\n      console.warn(\"A section cannot be the child of itself.\")\n      return false\n    }\n\n    return true\n  }\n\n\n  /**\n   * Checks if a given section is already one of the children of _this_ section\n   * @param {Section} section - a section to test\n   * @return {Boolean} true if the given section is already a child of _this_ section, false if not.\n   */\n  hasChild (section) {\n    if (!this._children)\n      return false\n\n    let candidateId = section.getId()\n\n    for (let i=0; i<this._children.length; i++) {\n      if (this._children[i].getId() === candidateId)\n        return true\n    }\n\n    return false\n  }\n\n\n}\n\nexport { Section }\n","\n/**\n * The soma is the cell body of a neurone and thus is sort of a simplified version\n * of a Section, in term of datastructure.\n */\nclass Soma {\n  constructor () {\n    this._id = null\n    this._typename = \"soma\"\n    this._typevalue = 1\n    this._center = null\n    this._radius = null\n  }\n\n  /**\n   * Defines the id of this soma.\n   * Note: should probably not be used after `initWithRawSection` because then\n   * sections already have ids and chance to messup the id game are pretty high.\n   * @param {String|Number} id - the id\n   */\n  setId (id) {\n    this._id = id\n  }\n\n\n  /**\n   * Get the id of _this_ soma\n   * @return {String|Number}\n   */\n  getId () {\n    return this._id\n  }\n\n\n  /**\n   * Build a soma using a raw soma object.\n   * @param {Object} rawSoma - usually comes from a JSON file\n   */\n  initWithRawSection (rawSoma) {\n    this._id = rawSoma.id\n    this._center = rawSoma.center\n    this._radius = rawSoma.radius\n\n    return this._id\n  }\n}\n\n\nexport { Soma }\n","import { Section } from './Section.js'\nimport { Soma } from './Soma.js'\n\n\n/**\n * A morphology is the data representation of a neurone's anatomy. It is composed\n * of one soma (cell body) and sections. Sections can be axons, dendrites, etc.\n * A Morphology instance can be built from scratch (though it can be a bit tedious)\n * but will generally be built using a JSON description.\n */\nclass Morphology {\n\n  constructor () {\n    this._id = null\n    this._sections = {}\n    this._soma = null\n  }\n\n\n  /**\n   * Set the ID of _this_ morphology\n   * @param {String|Number} id - the id\n   */\n  setId (id) {\n    this._id = id\n  }\n\n\n  /**\n   * Get the ID of _this_ morphology\n   * @return {String|Number}\n   */\n  getId () {\n    return this._id\n  }\n\n\n  /**\n   * Build a morphology from a raw dataset, that usually comes from a JSON file.\n   *\n   */\n  buildFromRawMorphology (rawMorphology) {\n    let that = this\n\n    this._soma = new Soma()\n    this._soma.initWithRawSection( rawMorphology.soma )\n\n    // Build the Section instances.\n    // This first step does not define parents nor children\n    for (let i=0; i<rawMorphology.sections.length; i++) {\n      let s = new Section()\n      let sId = s.initWithRawSection( rawMorphology.sections[i] )\n      this._sections[ sId ] = s\n    }\n\n    // Now we define parent and children\n    for (let i=0; i<rawMorphology.sections.length; i++) {\n      let currentRawSection = rawMorphology.sections[i]\n      let currentSection = this._sections[ currentRawSection.id ]\n\n      // adding a parent if there is one\n      if (currentRawSection.parent){\n        let parent = this._sections[ currentRawSection.parent ]\n        currentSection.setParent( parent )\n      }\n\n      let children = currentRawSection.children.map(function(c){return that._sections[ c ]})\n      for (let c=0; c<children.length; c++) {\n        currentSection.addChild( children[c] )\n      }\n    }\n\n\n    // Build the Soma instance\n    // TODO\n  }\n\n}\n\nexport { Morphology }\n"],"names":[],"mappings":";;;;;;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAM,OAAO,CAAC;;EAEd,EAAE,WAAW,CAAC,GAAG;EACjB,IAAI,IAAI,CAAC,GAAG,GAAG,KAAI;EACnB,IAAI,IAAI,CAAC,OAAO,GAAG,KAAI;EACvB,IAAI,IAAI,CAAC,SAAS,GAAG,GAAE;EACvB,IAAI,IAAI,CAAC,SAAS,GAAG,KAAI;EACzB,IAAI,IAAI,CAAC,UAAU,GAAG,KAAI;EAC1B,IAAI,IAAI,CAAC,OAAO,GAAG,KAAI;EACvB,IAAI,IAAI,CAAC,SAAS,GAAG,KAAI;EACzB,GAAG;;;EAGH;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,KAAK,CAAC,CAAC,EAAE,EAAE;EACb,IAAI,IAAI,CAAC,GAAG,GAAG,GAAE;EACjB,GAAG;;;EAGH;EACA;EACA;EACA;EACA,EAAE,KAAK,CAAC,GAAG;EACX,IAAI,OAAO,IAAI,CAAC,GAAG;EACnB,GAAG;;;EAGH;EACA;EACA;EACA;EACA,EAAE,kBAAkB,CAAC,CAAC,UAAU,EAAE;EAClC,IAAI,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC,GAAE;EAC5B,IAAI,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,SAAQ;EACxC,IAAI,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,UAAS;EAC1C,IAAI,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,EAAC;EAC1E,IAAI,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,EAAC;;EAEzE,IAAI,OAAO,IAAI,CAAC,GAAG;EACnB,GAAG;;;EAGH;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,SAAS,CAAC,CAAC,OAAO,EAAE;EACtB,IAAI,IAAI,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,KAAK,IAAI,CAAC,GAAG,EAAE;EACjD,MAAM,IAAI,CAAC,OAAO,GAAG,QAAO;EAC5B,MAAM,OAAO,IAAI;EACjB,KAAK;;EAEL,IAAI,OAAO,CAAC,IAAI,EAAE,2CAA2C,EAAC;EAC9D,IAAI,OAAO,KAAK;EAChB,GAAG;;;EAGH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,QAAQ,CAAC,CAAC,OAAO,EAAE;EACrB,IAAI,IAAI,OAAO,CAAC,KAAK,EAAE,KAAK,IAAI,CAAC,GAAG,EAAE;EACtC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;EAClC,QAAQ,OAAO,CAAC,IAAI,CAAC,4DAA4D,EAAC;EAClF,OAAO,MAAM;EACb,QAAQ,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,GAAE;EACtC,OAAO;EACP,MAAM,OAAO,IAAI;;EAEjB,KAAK,MAAM;EACX,MAAM,OAAO,CAAC,IAAI,CAAC,0CAA0C,EAAC;EAC9D,MAAM,OAAO,KAAK;EAClB,KAAK;;EAEL,IAAI,OAAO,IAAI;EACf,GAAG;;;EAGH;EACA;EACA;EACA;EACA;EACA,EAAE,QAAQ,CAAC,CAAC,OAAO,EAAE;EACrB,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS;EACvB,MAAM,OAAO,KAAK;;EAElB,IAAI,IAAI,WAAW,GAAG,OAAO,CAAC,KAAK,GAAE;;EAErC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EAChD,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,WAAW;EACnD,QAAQ,OAAO,IAAI;EACnB,KAAK;;EAEL,IAAI,OAAO,KAAK;EAChB,GAAG;;;EAGH,CAAC;;ECxHD;EACA;EACA;EACA;EACA,MAAM,IAAI,CAAC;EACX,EAAE,WAAW,CAAC,GAAG;EACjB,IAAI,IAAI,CAAC,GAAG,GAAG,KAAI;EACnB,IAAI,IAAI,CAAC,SAAS,GAAG,OAAM;EAC3B,IAAI,IAAI,CAAC,UAAU,GAAG,EAAC;EACvB,IAAI,IAAI,CAAC,OAAO,GAAG,KAAI;EACvB,IAAI,IAAI,CAAC,OAAO,GAAG,KAAI;EACvB,GAAG;;EAEH;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,KAAK,CAAC,CAAC,EAAE,EAAE;EACb,IAAI,IAAI,CAAC,GAAG,GAAG,GAAE;EACjB,GAAG;;;EAGH;EACA;EACA;EACA;EACA,EAAE,KAAK,CAAC,GAAG;EACX,IAAI,OAAO,IAAI,CAAC,GAAG;EACnB,GAAG;;;EAGH;EACA;EACA;EACA;EACA,EAAE,kBAAkB,CAAC,CAAC,OAAO,EAAE;EAC/B,IAAI,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAE;EACzB,IAAI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAM;EACjC,IAAI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAM;;EAEjC,IAAI,OAAO,IAAI,CAAC,GAAG;EACnB,GAAG;EACH,CAAC;;ECzCD;EACA;EACA;EACA;EACA;EACA;EACA,MAAM,UAAU,CAAC;;EAEjB,EAAE,WAAW,CAAC,GAAG;EACjB,IAAI,IAAI,CAAC,GAAG,GAAG,KAAI;EACnB,IAAI,IAAI,CAAC,SAAS,GAAG,GAAE;EACvB,IAAI,IAAI,CAAC,KAAK,GAAG,KAAI;EACrB,GAAG;;;EAGH;EACA;EACA;EACA;EACA,EAAE,KAAK,CAAC,CAAC,EAAE,EAAE;EACb,IAAI,IAAI,CAAC,GAAG,GAAG,GAAE;EACjB,GAAG;;;EAGH;EACA;EACA;EACA;EACA,EAAE,KAAK,CAAC,GAAG;EACX,IAAI,OAAO,IAAI,CAAC,GAAG;EACnB,GAAG;;;EAGH;EACA;EACA;EACA;EACA,EAAE,sBAAsB,CAAC,CAAC,aAAa,EAAE;EACzC,IAAI,IAAI,IAAI,GAAG,KAAI;;EAEnB,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,GAAE;EAC3B,IAAI,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,aAAa,CAAC,IAAI,GAAE;;EAEvD;EACA;EACA,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EACxD,MAAM,IAAI,CAAC,GAAG,IAAI,OAAO,GAAE;EAC3B,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC,kBAAkB,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAE;EACjE,MAAM,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,GAAG,EAAC;EAC/B,KAAK;;EAEL;EACA,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EACxD,MAAM,IAAI,iBAAiB,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC,EAAC;EACvD,MAAM,IAAI,cAAc,GAAG,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,EAAE,GAAE;;EAEjE;EACA,MAAM,IAAI,iBAAiB,CAAC,MAAM,CAAC;EACnC,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,MAAM,GAAE;EAC/D,QAAQ,cAAc,CAAC,SAAS,EAAE,MAAM,GAAE;EAC1C,OAAO;;EAEP,MAAM,IAAI,QAAQ,GAAG,iBAAiB,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAC;EAC5F,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EAC5C,QAAQ,cAAc,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,GAAE;EAC9C,OAAO;EACP,KAAK;;;EAGL;EACA;EACA,GAAG;;EAEH,CAAC;;;;;;;;;;;;"}